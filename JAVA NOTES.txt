__________________________________________________________________________________________________________

JAVA NOTES
__________________________________________________________________________________________________________

-->BASICS

public class (file_name){                      // THIS CODE IS CALLED BOILERPLATE CODE
                                               // i.e WRITTEN ALWAYS
           public static void main(String args[]){

               CODE WRITTEN HERE


           }
  }

___________________________________________________________________________________________________________

How to get output in java:-

OUTPUT:

syntax:-  System.out.print("");
          System.out.println("");  //next line print
                                   // \n is used for next line
___________________________________________________________________________________________________________
PRINT PATTERN

syntax:

System.out.println("*****");
Syatem.out.println("****");
System.out.println("***");
System.out.println("**");
System.out.println("*");

___________________________________________________________________________________________________________

VARIABLES:-
Java is a typed language.
two type of data type:
1. primitive
int,double,byte,short,char,boolen,long,float
2- non primitive
string,array,class,object,interface

___________________________________________________________________________________________________________

input_output-

example--

Scanner sc = new Scanner(System.in);
String name = sc.next();
System.out.println(name);

next- is used to get input of singe word
nextline- is used to get input of complete line
nextInt- inter value input
___________________________________________________________________________________________________________

Conditional Statement ::

if,else
else if
switch
break

-->  switch( ){
  case 1:
  statements;
  break;

  case 2:
    .
    .
    .
    .
    .
  default;
}

___________________________________________________________________________________________________________


"We can , we should & we will"

Loops in JAVA:

1. for Loops
 
 syntax:-

for(initilizze,condition,updation){

  statements

}

2. WHILE Loops

while(condition){
  //do statements

}

3. DO while Loops

do{
  //do something
}while(condition);



___________________________________________________________________________________________________________
PATTERN

outer loop --> row(downward)
inner loop --> column(sideways)


1.* * * * *
  * * * * *
  * * * * *
  * * * * *
  

2. hollow rectangle

   * * * * *
   *       *
   *       *
   * * * * *


3.*
  * *
  * * *
  * * * *
  * * * * *

4.

  * * * * * 
  * * * * 
  * * * 
  * * 
  *

5.  
          *
        * *
      * * *
    * * * *
  * * * * *


6. 1
   1 2
   1 2 3
   1 2 3 4
   1 2 3 4 5


7. Character PATTERN

   A
   B C
   D E F 
   G H I J 
   K L M N O
  

___________________________________________________________________________________________________________ 

--> FUNCTIONS/Methods

syntax:-


returnType name(){
  //body
  return statements;

}


--> FUNCTION with Parameters

returnType name(type param1,type param2){

  //body
  return statements;
}



-->what happend in memory?

when function calls some memory get reserved in the form of stack.

(call stack)
___________________________________________________________________________________________________________

CALL BY VALUE (SWAP)
java always call by value.
--> the copy of original variable get pass to the function created(call function)
--> their is no change in original value.(Function call)


-->Function Overloading

Multiple function with the same name but different paramerets.
(In function overloading change in parameters happend not in the function)


___________________________________________________________________________________________________________

--> OOPS CONCEPTS

new keyword- it will works as an heep due to which some space get 
allocated in the memory according to the objects.
()->constructors 

1. class


___________________________________________________________________________________________________________


Try and Catch(exceptions calculation)
Syntax:

try{

}
catch(Exception ){

}



___________________________________________________________________________________________________________
___________________________________________________________________________________________________________

Strings are immutable i.e. we cannot change the string after we create it.

NOTE--> lexograpgically means relating to dictionaries, or to the writing, editing, or compiling of dictionaries.
used as -> int i= a.compareTo(b);

Substring-->example

String s=""
start=""
end=""
String new_s=s.substring(start,end);// give the substring

-->charAt is used to acces the String character.

for(int i=0;i<string.length();i++){
  system.out.print(s.charAt(i)+" ");
}

concatenation-> to add two string
compare String = s1.compareTo(s2);(on the basic of lexograpgic order)



String builder-->
StringBuilder sb = new StringBuilder("String");
System.out.print(sb);

sb.insert(2,n);
System.out.print(sb);

sb.delete(2,3);
System.out.println(sb);

sb.append(""); --> to add element at the end.

parseInt()--> used to convert number represented as the string into integer type.


___________________________________________________________________________________________________________ 
___________________________________________________________________________________________________________


Array in java

How to initilize --> int[] array;

Allocating memory --> array = new int[size];

initilizing element --> array[0] = value;

accessing the elements of array --> 

for(int i =0 ; i<array.length; i++){
  System.out.println(array[i]);
}




User_Input-->(Taking input of element and array size from the user)

Scanner sc = new Scanner (System.in);

// enter the size of the array(User_Input)

int Arr_size=0;
if(sc.hasNextInt()){  // hasNextInt() ,Method returnif the next token in the scanner input can be assumed as int value.
  Arr_size = sc.nextInt();
}

int[] arr = new int[Arr_size];
System.out.println("eneter the elements of the array-");

for(int i=0;i<Arr_size;i++){
  if(sc.hasNextInt()){
    arr[i]=sc.nextInt();
  }
}

// the element of array(accessing)

for(int i =0 ; i<array.length; i++){
  System.out.print(array[i]+" ");
}

To get element of the array we can also use--> array.get(index or i);


___________________________________________________________________________________________________________ 
___________________________________________________________________________________________________________ 


Dictionaries::

Dictionary is the list of keyvalues pairs. we can store,retrive,remove,get and put values in the dictionary by using
the java dictionary class.
dictionary class == hastable class

it maps the keys to the value

note that every key and value is an object and any non-null object can be used as akey and a value.

example->

// creating a dictionary

Dictionary dict = new Hastable();

using dictionary.put() Method

// adding value in the dictionary 

dict.put(101,"arpit");
dict.put(102,"fantastic");

// to print

System.out.print(dict);

// to get size

System.out.println("sizeis"+dict.size());

// to retrive value

System.out.println("the value of specific key"+dict.get(102));

// empty --> it return true if the dictionary is empty else false

System.out.println("empty or not\n"+dictr.isEmpty());


// to remove

System.out.println("removed value is"+ dict.remove(102));



Difference Between the HashMap and Dictionary Class
The Java HashMap class and the Dictionary class both perform a similar function. The only difference is 
that HashMap implements the Map Interface while the Dictionary class does not. According to Java documentation, 
the Dictionary class is no longer in use because it is outdated. Instead of the Dictionary class, the HashMap 
class is used. Since we can say that HashMap is a type of dictionary.


___________________________________________________________________________________________________________

Maps::


A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry.
A Map contains unique keys.

A Map is useful if you have to search, update or delete elements on the basis of a key.


old Method

//Non-generic  
import java.util.*;  
public class MapExample1 {  
public static void main(String[] args) {  
    Map map=new HashMap();  
    //Adding elements to map  
    map.put(1,"Amit");  
    map.put(5,"Rahul");  
    map.put(2,"Jai");  
    map.put(6,"Amit");  
    //Traversing Map  
    Set set=map.entrySet();//Converting to Set so that we can traverse  
    Iterator itr=set.iterator();  
    while(itr.hasNext()){  
        //Converting to Map.Entry so that we can get key and value separately  
        Map.Entry entry=(Map.Entry)itr.next();  
        System.out.println(entry.getKey()+" "+entry.getValue());  
    }  
}  
}  


New Style::

Map<Integer,String> map = new HashMap<Integer,String>();

map.put(100,"amit");
map.put(102,"vijay");

// elements can traverse in any order

for(Map.Entry m:map.entrySet()){
  System.out.println(m.getKey()+" "+m.getValue());

}

__________________________________________________________________________________________________________
__________________________________________________________________________________________________________

HashMap ::

(key,value)

key- unique
value- not unique


time complexity-- vego of 1(insert,remove,search)



 HashMap<key(dataType), value(dataType)> map = new HashMap<>();
 
 HashMap<String, Integer> map = new HashMap<>();

        // country(key) , population(value)

        map.put("india",120);
        map.put("us",30);
        map.put("china",129);

        System.out.println(map);

   // search or to look up

        if(map.containsKey("china")){
            System.out.println("is present");
        }
        else{
            System.out.println("not present");
        }


  Itrate in MAPS::

  // to triverse

  // Itrate

for(Map.Entry<String, Integer> e : map.entrySet()){
 
    System.out.println(e.getKey()+" = "+ e.getValue());
    //System.out.println(e.getValue());
}

__________________________________________________________________________________________________________

Hashing--> prestory/fetching


HashMap :: user input


HashMap<Integer, Integer> hmap = new HashMap<>();
        Scanner in = new Scanner(System.in);

        for (int i = 0; i < 3; i++) 
            Integer a = in.nextInt();
            Integer b = in.nextInt();
            
            hmap.put(a, b);

            System.out.println(hmap.put(a, b));



__________________________________________________________________________________________________________

Regex:-

The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.

It is widely used to define the constraint on strings such as password and email validation. After learning
Java regex tutorial, you will be able to test your regular expressions by the Java Regex Tester Tool.

RegExr.com

exemple-->

import java.util.regex.*;  
public class RegexExample1{  
public static void main(String args[]){  
//1st way  
Pattern p = Pattern.compile(".s");//. represents single character  
Matcher m = p.matcher("as");  
boolean b = m.matches();  
  
//2nd way  
boolean b2=Pattern.compile(".s").matcher("as").matches();  
  
//3rd way  
boolean b3 = Pattern.matches(".s", "as");  
  
System.out.println(b+" "+b2+" "+b3);  
}}  

__________________________________________________________________________________________________________

ARRAYS--


List of elements of the same type placed in contiguous memory location.

Operation in arrays-

create
input
output
update


Static:- cannot change value during runtime


1. Creating an Array

dataType arrayname[]= new dataType[size];

eg.

int number[]=new int[45];

int number[]={1,2,3};

int morenumber[]={1,2,3,4,5};

String fruits[]={"apple","mango","graps"};


Passing arrays as argument:

int arr[]=new int[arr_size];
        System.out.println("Enter the element in the array");
        for(i=0;i<arr.length;i++)
            arr[i]=sc.nextInt();


2. Creating 2D array::(tabulation)


int matrix[][] = new int[3][4];
n=3,m=4;

Scanner sc = new Scanner(System.in);
for(int i=0;i<n;i++){
  for(int j=0;j<m;j++){
    matrix[i][j]=sc.nextInt();
  }
}


Output::

for(int i=0;i<n;i++){
  for(int j=0;j<m;j++){
    System.out.println(matrix[i][j]+" ");
  }
}

__________________________________________________________________________________________________________

ArrayList(Collection framework)

1. size variable
2. only store objects
3. heap concept memory allocation

function of arrList::

add,get,modify(add in between),delete/remove,iterate(operation)

import java.util.ArrayList;

define::

ArrayList<Integer> list = new ArrayList<Integer>();
ArrayList<String> list1 = new ArrayList<String>();

// Add elements

list.add(0);
list.add(2);
list.add(3);

// get element

int element =list.get(0);
system.out.print(element);

// to add element in between

list.add(1,1);

//set element
list.set(0,5);

//delete/remove element
list.remove(3);

//size
int size=list.size();

//Loops
for(int i=0;i<list.size;i++){
  system.out.print(list.get(i));
}

// sorting

Collections.sort(list); 
System.out.print(list);

__________________________________________________________________________________________________________

Linked List::


__________________________________________________________________________________________________________

STACK (last in,first out)

operations::-

1.Push() // time complexity O(1)
2.Pop() // time complexity O(1)
3.Peek() -->get value of top element in the stack // time complexity O(1)

Implementation::

1. as Array(fixed size)  //not practically used

2. as ArrayList   (variable size) 
3. as Linked List 


Syntex:: 

Implementation using ArrayList





